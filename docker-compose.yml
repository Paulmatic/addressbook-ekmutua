

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py collectstatic --noinput &&
      gunicorn addressbook.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2"
    env_file:
      - .env.prod
    environment:
      - DJANGO_MEDIA_ROOT=/code/media
      - DJANGO_STATIC_ROOT=/code/staticfiles
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/media
      - ./media:/code/media  # Local development override
    user: "1000:1000"  # Run as non-root user with your host UID/GID
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    env_file:
      - .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:1.21-alpine
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d/addressbook.conf:/etc/nginx/conf.d/default.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - static_volume:/code/staticfiles:ro
      - media_volume:/code/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - backend
      - frontend
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - db

volumes:
  postgres_data:
  static_volume:
  media_volume:
    driver_opts:
      type: none
      device: ${MEDIA_VOLUME_PATH:-./media}  # Use environment variable or default
      o: bind
  pgadmin_data:

networks:
  backend:
  frontend: