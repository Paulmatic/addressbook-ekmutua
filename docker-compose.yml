
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn addressbook.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2
    env_file:
      - .env.prod
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    ports:
      - "8000:8000"  # Exposed port for direct access
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  db:
    image: postgres:13-alpine
    env_file:
      - .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:1.21-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - backend
      - frontend
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - db

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  pgadmin_data:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge